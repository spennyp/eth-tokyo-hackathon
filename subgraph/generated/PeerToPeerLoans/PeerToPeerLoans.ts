// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LoanCreated extends ethereum.Event {
  get params(): LoanCreated__Params {
    return new LoanCreated__Params(this);
  }
}

export class LoanCreated__Params {
  _event: LoanCreated;

  constructor(event: LoanCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get principal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interest(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get lengthDays(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LoanFunded extends ethereum.Event {
  get params(): LoanFunded__Params {
    return new LoanFunded__Params(this);
  }
}

export class LoanFunded__Params {
  _event: LoanFunded;

  constructor(event: LoanFunded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fundDay(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanRepayed extends ethereum.Event {
  get params(): LoanRepayed__Params {
    return new LoanRepayed__Params(this);
  }
}

export class LoanRepayed__Params {
  _event: LoanRepayed;

  constructor(event: LoanRepayed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PeerToPeerLoans__getLoanResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getBorrower(): Address {
    return this.value0;
  }

  getToken(): Address {
    return this.value1;
  }

  getPrincipal(): BigInt {
    return this.value2;
  }

  getInterest(): BigInt {
    return this.value3;
  }

  getLengthDays(): BigInt {
    return this.value4;
  }

  getLender(): Address {
    return this.value5;
  }

  getFundDay(): BigInt {
    return this.value6;
  }

  getRepaid(): boolean {
    return this.value7;
  }
}

export class PeerToPeerLoans__loansResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getBorrower(): Address {
    return this.value0;
  }

  getToken(): Address {
    return this.value1;
  }

  getPrincipal(): BigInt {
    return this.value2;
  }

  getInterest(): BigInt {
    return this.value3;
  }

  getLengthDays(): BigInt {
    return this.value4;
  }

  getLender(): Address {
    return this.value5;
  }

  getFundDay(): BigInt {
    return this.value6;
  }

  getRepaid(): boolean {
    return this.value7;
  }
}

export class PeerToPeerLoans extends ethereum.SmartContract {
  static bind(address: Address): PeerToPeerLoans {
    return new PeerToPeerLoans("PeerToPeerLoans", address);
  }

  computeInterest(
    principal: BigInt,
    interestBips: BigInt,
    daysBorrowed: BigInt
  ): BigInt {
    let result = super.call(
      "computeInterest",
      "computeInterest(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principal),
        ethereum.Value.fromUnsignedBigInt(interestBips),
        ethereum.Value.fromUnsignedBigInt(daysBorrowed)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeInterest(
    principal: BigInt,
    interestBips: BigInt,
    daysBorrowed: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeInterest",
      "computeInterest(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principal),
        ethereum.Value.fromUnsignedBigInt(interestBips),
        ethereum.Value.fromUnsignedBigInt(daysBorrowed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createLoan(
    _token: Address,
    _principal: BigInt,
    _interest: BigInt,
    _lengthDays: BigInt
  ): BigInt {
    let result = super.call(
      "createLoan",
      "createLoan(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_interest),
        ethereum.Value.fromUnsignedBigInt(_lengthDays)
      ]
    );

    return result[0].toBigInt();
  }

  try_createLoan(
    _token: Address,
    _principal: BigInt,
    _interest: BigInt,
    _lengthDays: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLoan",
      "createLoan(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_interest),
        ethereum.Value.fromUnsignedBigInt(_lengthDays)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLoan(id: BigInt): PeerToPeerLoans__getLoanResult {
    let result = super.call(
      "getLoan",
      "getLoan(uint256):(address,address,uint256,uint256,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new PeerToPeerLoans__getLoanResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_getLoan(id: BigInt): ethereum.CallResult<PeerToPeerLoans__getLoanResult> {
    let result = super.tryCall(
      "getLoan",
      "getLoan(uint256):(address,address,uint256,uint256,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PeerToPeerLoans__getLoanResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  loans(param0: BigInt): PeerToPeerLoans__loansResult {
    let result = super.call(
      "loans",
      "loans(uint256):(address,address,uint256,uint256,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PeerToPeerLoans__loansResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_loans(param0: BigInt): ethereum.CallResult<PeerToPeerLoans__loansResult> {
    let result = super.tryCall(
      "loans",
      "loans(uint256):(address,address,uint256,uint256,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PeerToPeerLoans__loansResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }
}

export class CreateLoanCall extends ethereum.Call {
  get inputs(): CreateLoanCall__Inputs {
    return new CreateLoanCall__Inputs(this);
  }

  get outputs(): CreateLoanCall__Outputs {
    return new CreateLoanCall__Outputs(this);
  }
}

export class CreateLoanCall__Inputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _principal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _interest(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _lengthDays(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateLoanCall__Outputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FundLoanCall extends ethereum.Call {
  get inputs(): FundLoanCall__Inputs {
    return new FundLoanCall__Inputs(this);
  }

  get outputs(): FundLoanCall__Outputs {
    return new FundLoanCall__Outputs(this);
  }
}

export class FundLoanCall__Inputs {
  _call: FundLoanCall;

  constructor(call: FundLoanCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundLoanCall__Outputs {
  _call: FundLoanCall;

  constructor(call: FundLoanCall) {
    this._call = call;
  }
}

export class RepayLoanCall extends ethereum.Call {
  get inputs(): RepayLoanCall__Inputs {
    return new RepayLoanCall__Inputs(this);
  }

  get outputs(): RepayLoanCall__Outputs {
    return new RepayLoanCall__Outputs(this);
  }
}

export class RepayLoanCall__Inputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayLoanCall__Outputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }
}
